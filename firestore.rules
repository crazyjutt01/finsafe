rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own user document.
     * @allow (get) User with UID 'user123' can get their own user document.
     * @allow (update) User with UID 'user123' can update their own user document.
     * @allow (delete) User with UID 'user123' can delete their own user document.
     * @deny (create) User with UID 'user456' cannot create a user document for 'user123'.
     * @deny (update) User with UID 'user456' cannot update the user document for 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the user document for 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure access to budget information for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with UID 'user123' can create a budget document under their user document.
     * @allow (get) User with UID 'user123' can get a budget document under their user document.
     * @allow (list) User with UID 'user123' can list budget documents under their user document.
     * @allow (update) User with UID 'user123' can update a budget document under their user document.
     * @allow (delete) User with UID 'user123' can delete a budget document under their user document.
     * @deny (create) User with UID 'user456' cannot create a budget document under the user document of 'user123'.
     * @deny (get) User with UID 'user456' cannot get a budget document under the user document of 'user123'.
     * @deny (list) User with UID 'user456' cannot list budget documents under the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update a budget document under the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a budget document under the user document of 'user123'.
     * @principle Restricts access to a user's own budget data.
     */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure access to transaction information for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction document under their user document.
     * @allow (get) User with UID 'user123' can get a transaction document under their user document.
     * @allow (list) User with UID 'user123' can list transaction documents under their user document.
     * @allow (update) User with UID 'user123' can update a transaction document under their user document.
     * @allow (delete) User with UID 'user123' can delete a transaction document under their user document.
     * @deny (create) User with UID 'user456' cannot create a transaction document under the user document of 'user123'.
     * @deny (get) User with UID 'user456' cannot get a transaction document under the user document of 'user123'.
     * @deny (list) User with UID 'user456' cannot list transaction documents under the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update a transaction document under the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a transaction document under the user document of 'user123'.
     * @principle Restricts access to a user's own transaction data.
     */
    match /users/{userId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure access to category information for a specific user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (create) User with UID 'user123' can create a category document under their user document.
     * @allow (get) User with UID 'user123' can get a category document under their user document.
     * @allow (list) User with UID 'user123' can list category documents under their user document.
     * @allow (update) User with UID 'user123' can update a category document under their user document.
     * @allow (delete) User with UID 'user123' can delete a category document under their user document.
     * @deny (create) User with UID 'user456' cannot create a category document under the user document of 'user123'.
     * @deny (get) User with UID 'user456' cannot get a category document under the user document of 'user123'.
     * @deny (list) User with UID 'user456' cannot list category documents under the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update a category document under the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a category document under the user document of 'user123'.
     * @principle Restricts access to a user's own category data.
     */
    match /users/{userId}/categories/{categoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure access to saving goal information for a specific user.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (create) User with UID 'user123' can create a saving goal document under their user document.
     * @allow (get) User with UID 'user123' can get a saving goal document under their user document.
     * @allow (list) User with UID 'user123' can list saving goal documents under their user document.
     * @allow (update) User with UID 'user123' can update a saving goal document under their user document.
     * @allow (delete) User with UID 'user123' can delete a saving goal document under their user document.
     * @deny (create) User with UID 'user456' cannot create a saving goal document under the user document of 'user123'.
     * @deny (get) User with UID 'user456' cannot get a saving goal document under the user document of 'user123'.
     * @deny (list) User with UID 'user456' cannot list saving goal documents under the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update a saving goal document under the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a saving goal document under the user document of 'user123'.
     * @principle Restricts access to a user's own saving goal data.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure access to alert information for a specific user.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (create) User with UID 'user123' can create an alert document under their user document.
     * @allow (get) User with UID 'user123' can get an alert document under their user document.
     * @allow (list) User with UID 'user123' can list alert documents under their user document.
     * @allow (update) User with UID 'user123' can update an alert document under their user document.
     * @allow (delete) User with UID 'user123' can delete an alert document under their user document.
     * @deny (create) User with UID 'user456' cannot create an alert document under the user document of 'user123'.
     * @deny (get) User with UID 'user456' cannot get an alert document under the user document of 'user123'.
     * @deny (list) User with UID 'user456' cannot list alert documents under the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update an alert document under the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete an alert document under the user document of 'user123'.
     * @principle Restricts access to a user's own alert data.
     */
    match /users/{userId}/alerts/{alertId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure access to emergency contact information for a specific user.
     * @path /users/{userId}/emergencyContacts/{contactId}
     * @allow (create) User with UID 'user123' can create an emergency contact document under their user document.
     * @allow (get) User with UID 'user123' can get an emergency contact document under their user document.
     * @allow (list) User with UID 'user123' can list emergency contact documents under their user document.
     * @allow (update) User with UID 'user123' can update an emergency contact document under their user document.
     * @allow (delete) User with UID 'user123' can delete an emergency contact document under their user document.
     * @deny (create) User with UID 'user456' cannot create an emergency contact document under the user document of 'user123'.
     * @deny (get) User with UID 'user456' cannot get an emergency contact document under the user document of 'user123'.
     * @deny (list) User with UID 'user456' cannot list emergency contact documents under the user document of 'user123'.
     * @deny (update) User with UID 'user456' cannot update an emergency contact document under the user document of 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete an emergency contact document under the user document of 'user123'.
     * @principle Restricts access to a user's own emergency contact data.
     */
    match /users/{userId}/emergencyContacts/{contactId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}