/**
 * @fileoverview Firestore Security Rules for FinSafe application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model where each user has exclusive
 * access to their own data, including budgets, transactions, categories, saving goals, and alerts.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, ensuring data isolation and efficient querying.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Listing collections is restricted to the owner of the user subcollection.
 * - Users can only create a user document for themselves (self-registration).
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization is required as the path-based structure inherently provides user isolation and ownership.
 *
 * Structural Segregation:
 *  N/A - No segregation needed since all user data is already in separate collections under the user's ID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access restrictions. Prevents access to the entire database.
     * @path /databases/{database}/documents
     * @allow (get, list) if false
     * @deny (create, update, delete) if true
     * @principle Prevents blanket access to the database; all access must be defined more granularly.
     */
    match /{document=**} {
       allow read, write: if false;
    }

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the resource
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is the owner of the resource and if the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Authenticated users can read their own profile data.
     * @allow (create) Authenticated users can create their own profile if the userId matches their auth.uid.
     * @allow (update, delete) Authenticated users can update and delete their own profile data.
     * @deny (get) Anonymous users cannot read user profile data.
     * @deny (create) Users cannot create profiles for other users.
     * @deny (update, delete) Users cannot modify or delete other user's profiles.
     * @principle Enforces document ownership for writes.  Allows self-creation on `create`.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to budget documents for a specific user.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (get, list) Authenticated users can read their own budget data.
     * @allow (create, update, delete) Authenticated users can create, update, and delete their own budget data.
     * @deny (get, list) Anonymous users cannot read user budget data.
     * @deny (create, update, delete) Users cannot modify or delete other user's budgets.
     * @principle Restricts access to a user's own budget data.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to transaction documents for a specific user.
     * @path /users/{userId}/transactions/{transactionId}
     * @allow (get, list) Authenticated users can read their own transaction data.
     * @allow (create, update, delete) Authenticated users can create, update, and delete their own transaction data.
     * @deny (get, list) Anonymous users cannot read user transaction data.
     * @deny (create, update, delete) Users cannot modify or delete other user's transactions.
     * @principle Restricts access to a user's own transaction data.
     */
    match /users/{userId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to category documents for a specific user.
     * @path /users/{userId}/categories/{categoryId}
     * @allow (get, list) Authenticated users can read their own category data.
     * @allow (create, update, delete) Authenticated users can create, update, and delete their own category data.
     * @deny (get, list) Anonymous users cannot read user category data.
     * @deny (create, update, delete) Users cannot modify or delete other user's categories.
     * @principle Restricts access to a user's own category data.
     */
    match /users/{userId}/categories/{categoryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to saving goal documents for a specific user.
     * @path /users/{userId}/savingGoals/{savingGoalId}
     * @allow (get, list) Authenticated users can read their own saving goal data.
     * @allow (create, update, delete) Authenticated users can create, update, and delete their own saving goal data.
     * @deny (get, list) Anonymous users cannot read user saving goal data.
     * @deny (create, update, delete) Users cannot modify or delete other user's saving goals.
     * @principle Restricts access to a user's own saving goal data.
     */
    match /users/{userId}/savingGoals/{savingGoalId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to alert documents for a specific user.
     * @path /users/{userId}/alerts/{alertId}
     * @allow (get, list) Authenticated users can read their own alert data.
     * @allow (create, update, delete) Authenticated users can create, update, and delete their own alert data.
     * @deny (get, list) Anonymous users cannot read user alert data.
     * @deny (create, update, delete) Users cannot modify or delete other user's alerts.
     * @principle Restricts access to a user's own alert data.
     */
    match /users/{userId}/alerts/{alertId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}